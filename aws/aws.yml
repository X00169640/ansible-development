- name: aws infrastructure
  hosts: localhost
  connection: local
  collections:
    - amazon.aws
    - community.aws
  vars:
    database_password: null
    database_user: null
    key_name: testkey
    default_region: eu-west-1
    vpc_cidr_block: "10.0.0.0/16"
    ec2_resource_prefix: test-aws
    ec2_ami_id: ami-24506250
    ec2_subnet: "10.0.1.0/24"
    public_subnets:
      - name: eu-west-1a
        cidr: "10.0.0.0/24"
      - name: eu-west-1b
        cidr: "10.0.1.0/24"
    private_subnets:
      - name: eu-west-1a
        cidr: "10.0.101.0/24"
      - name: eu-west-1b 
        cidr: "10.0.102.0/24"
    database_subnets:
      - name: eu-west-1a
        cidr: "10.0.201.0/24"
      - name: eu-west-1b 
        cidr: "10.0.202.0/24"
  module_defaults:
    amazon.aws.ec2_vpc_subnet:
      region: "{{ default_region }}"
    amazon.aws.ec2_group:
      region: "{{ default_region }}"

  tasks:
    - name: create resources
      block:
        - name: Create SSH Key Pair for instance
          amazon.aws.ec2_key:
            name: "{{ ec2_resource_prefix }}"
            region: "{{ default_region }}"
          register: create_key

        - name: Save Private Key
          ansible.builtin.copy:
            content: "{{ create_key.key.private_key }}"
            dest: "{{ playbook_dir }}/{{ ec2_resource_prefix }}.pem"
            mode: '0400'
          when: create_key.changed

        - name: create a VPC
          amazon.aws.ec2_vpc_net:
            name: primary_vpc
            cidr_block: "{{ vpc_cidr_block }}"
            region: "{{ default_region }}"
            state: present
            tags:
              Name: aws-ansible-vpc
          register: primary_vpc

        - name: create internet gateway
          amazon.aws.ec2_vpc_igw:
            vpc_id: "{{ primary_vpc.vpc.id }}"
            region: "{{ default_region }}"
            state: present
            tags:
              Name: "aws-ansible-igw"
          register: igw

        - name: create public subnets
          amazon.aws.ec2_vpc_subnet:
            vpc_id: "{{ primary_vpc.vpc.id }}"
            cidr: "{{ item.cidr }}"
            az: "{{ item.name }}"
            tags:
              Name: "aws-ansible-public-subnet-{{ item.name }}"
          loop: "{{ public_subnets }}"
          loop_control:
            label: "Creating subnet {{ item.name }}"
          register: pub_subnets

        - name: create private subnets
          amazon.aws.ec2_vpc_subnet:
            vpc_id: "{{ primary_vpc.vpc.id }}"
            cidr: "{{ item.cidr }}"
            az: "{{ item.name }}"
            tags:
              Name: "aws-ansible-private-subnet-{{ item.name }}"
          loop: "{{ private_subnets }}"
          register: priv_subnets

        - name: create database subnets
          amazon.aws.ec2_vpc_subnet:
            vpc_id: "{{ primary_vpc.vpc.id }}"
            cidr: "{{ item.cidr }}"
            az: "{{ item.name }}"
            tags:
              Name: "aws-ansible-database-subnet-{{ item.name }}"
          loop: "{{ database_subnets }}"
          register: db_subnets

        - name: associate route table with public subnets
          community.aws.ec2_vpc_route_table:
            vpc_id: "{{ primary_vpc.vpc.id }}"
            region: "{{ default_region }}"
            subnets: "{% set  subnet_list = [] %}{% for subnet in pub_subnets.results %}{{ subnet_list.append(subnet.subnet.id) }}{% endfor%}{{ subnet_list }}"
            tags:
              Name: aws-ansible-public-subnet-route-table
            routes:
              - dest: "0.0.0.0/0"
                gateway_id: "{{ igw.gateway_id }}"
            state: present
          register: route_table 
        
        - name: create web elb security group 
          amazon.aws.ec2_group:
            name: webElb
            vpc_id: "{{ primary_vpc.vpc.id }}"
            description: "Allow HTTP requests to the web lb"
            rules:
              - proto: tcp 
                from_port: 80
                to_port: 80
                cidr_ip: "0.0.0.0/0"
              - proto: tcp 
                from_port: 22
                to_port: 22
                cidr_ip: "0.0.0.0/0"
            rules_egress:
              - proto: -1 
                from_port: 0
                to_port: 0
                cidr_ip: "0.0.0.0/0"
            tags:
              Name: aws-ansible-web-elb-security-group
          register: webElb

        - name: create web target group
          community.aws.elb_target_group:
            region: "{{ default_region }}"
            name: webTargetGroup
            protocol: http 
            port: 80
            vpc_id: "{{ primary_vpc.vpc.id }}"
            health_check_protocol: http
            health_check_port: 80
            state: present
          register: webTargetGroup

        - name: web app load balancer 
          community.aws.elb_application_lb:
            name: webAppLb 
            state: present
            region: "{{ default_region }}"
            subnets: "{% set  subnet_list = [] %}{% for subnet in pub_subnets.results %}{{ subnet_list.append(subnet.subnet.id) }}{% endfor%}{{ subnet_list }}"
            security_groups: 
              - webElb
            scheme: internet-facing
            listeners:
              - Protocol: HTTP 
                Port: 80 
                DefaultActions:
                  - Type: forward
                    TargetGroupArn: "{{ webTargetGroup['target_group_arn'] }}"
          register: webAppLb

        - name: create web elb security group 
          amazon.aws.ec2_group:
            name: webInstanceSg
            vpc_id: "{{ primary_vpc.vpc.id }}"
            description: "Allow http requests to the web servers"
            rules:
              - proto: tcp 
                from_port: 80
                to_port: 80
                cidr_ip: "0.0.0.0/0"
              - proto: tcp 
                from_port: 22
                to_port: 22
                cidr_ip: "0.0.0.0/0"
            rules_egress:
              - proto: -1 
                from_port: 0
                to_port: 0
                cidr_ip: "0.0.0.0/0"
            tags:
              Name: aws-ansible-web-server-security-group
          register: webInstanceSg

        - name: Provision web EC2 instances
          community.aws.ec2_instance:
            name: "aws-ansible-webinstance-{{ item.subnet.availability_zone }}"
            region: "{{ default_region }}"
            instance_type: "t1.micro"
            image_id: "{{ ec2_ami_id }}"
            key_name: "{{ ec2_resource_prefix }}"
            vpc_subnet_id: "{{ item.subnet.id }}"
            state: running
            network:
              assign_public_ip: true
            security_group: "webInstanceSg"
            wait: yes
            tags:
              Name: "aws-ansible-webinstance-{{ item.subnet.availability_zone }}"
          register: web_ec2
          loop: "{{ pub_subnets.results }}"
        
        - name: Sleep for 30 secs to allow a public ip be assigned
          wait_for:
            timeout: 25
          delegate_to: localhost
          when: web_ec2.changed | bool


        - name: create app elb security group 
          amazon.aws.ec2_group:
            name: appSg
            vpc_id: "{{ primary_vpc.vpc.id }}"
            description: "Allowing HTTP requests to the app tier application load balancer"
            rules:
              - proto: tcp 
                from_port: 80
                to_port: 80
                group_id: "{{ webInstanceSg.group_id }}"
            rules_egress:
              - proto: -1 
                from_port: 0
                to_port: 0
                cidr_ip: "0.0.0.0/0"
            tags:
              Name: aws-ansible-elb-app-security-group
          register: appSg

        - name: create app target group
          community.aws.elb_target_group:
            region: "{{ default_region }}"
            name: appTargetGroup
            protocol: http 
            port: 80
            vpc_id: "{{ primary_vpc.vpc.id }}"
            health_check_protocol: http
            health_check_port: 80
            state: present
          register: appTargetGroup

        - name: create app load balancer 
          community.aws.elb_application_lb:
            name: appLb 
            state: present
            region: "{{ default_region }}"
            subnets: "{% set  subnet_list = [] %}{% for subnet in priv_subnets.results %}{{ subnet_list.append(subnet.subnet.id) }}{% endfor%}{{ subnet_list }}"
            security_groups: 
              - appSg
            scheme: internet-facing
            listeners:
              - Protocol: HTTP 
                Port: 80 
                DefaultActions:
                  - Type: forward
                    TargetGroupArn: "{{ appTargetGroup['target_group_arn'] }}"
          register: appLb

        - name: create app instance security group 
          amazon.aws.ec2_group:
            name: appInstanceSg
            vpc_id: "{{ primary_vpc.vpc.id }}"
            description: "Allowing requests to the app servers"
            rules:
              - proto: tcp 
                from_port: 80
                to_port: 80
                group_id: "{{ appSg.group_id }}"
            rules_egress:
              - proto: -1 
                from_port: 0
                to_port: 0
                cidr_ip: "0.0.0.0/0"
            tags:
              Name: aws-ansible-app-instance-security-group
          register: appInstanceSg

        - name: Provision app EC2 instances
          community.aws.ec2_instance:
            name: "aws-ansible-appinstance-{{ item.subnet.availability_zone }}"
            region: "{{ default_region }}"
            instance_type: "t1.micro"
            image_id: "{{ ec2_ami_id }}"
            key_name: "{{ ec2_resource_prefix }}"
            vpc_subnet_id: "{{ item.subnet.id }}"
            state: running
            network:
              assign_public_ip: true
            security_group: "appInstanceSg"
            wait: yes
            tags:
              Name: "aws-ansible-appinstance-{{ item.subnet.availability_zone }}"
          register: app_ec2
          loop: "{{ priv_subnets.results }}"

        - name: create db instance security group 
          amazon.aws.ec2_group:
            name: dbSecurityGroup
            vpc_id: "{{ primary_vpc.vpc.id }}"
            description: "RDS postgres server security group"
            rules:
              - proto: tcp 
                from_port: 5432
                to_port: 5432
                group_id: "{{ appInstanceSg.group_id }}"
            rules_egress:
              - proto: -1 
                from_port: 0
                to_port: 0
                cidr_ip: "0.0.0.0/0"
            tags:
              Name: aws-ansible-db-security-group
          register: dbSecurityGroup

        - name: create database subnet
          community.aws.rds_subnet_group:
            state: present
            region: "{{ default_region }}"
            name: dbsubnet
            description: Subnet group of targeted database subnets
            subnets: "{% set  subnet_list = [] %}{% for subnet in db_subnets.results %}{{ subnet_list.append(subnet.subnet.id) }}{% endfor%}{{ subnet_list }}"

        - name: create postgres db instance
          community.aws.rds_instance:
            state: present
            allocated_storage: 10
            backup_retention_period: 0 
            region: "{{ default_region }}"
            db_instance_identifier: ansible-aws-rds
            engine: postgres
            multi_az: true
            instance_type: db.t3.micro
            vpc_security_group_ids:
              - "{{ dbSecurityGroup.group_id }}"
            username: "{{ database_user }}"
            password: "{{ database_password }}"
            db_subnet_group_name: dbsubnet
            skip_final_snapshot: true
            tags:
              Name: ansible-aws-rds
        - name: Gather information about web instances
          community.aws.ec2_instance_info:
            region: "{{ default_region }}"
            filters:
              "tag:Name": "aws-ansible-webinstance*"
              instance-state-name: ["running"]
          register: ec2_node_info

        - name: Add instance(s) to my_instances group
          ansible.builtin.add_host:
            name: "{{ item.public_dns_name }}"
            ansible_host: "{{ item.public_ip_address }}"
            ansible_user: "ec2-user"
            private_ip: "{{ item.private_ip_address }}"
            instance_name: "{{ ec2_resource_prefix }}"
            ansible_ssh_private_key_file: "{{ playbook_dir }}/{{ ec2_resource_prefix }}.pem"
            groups:
              - web_instances
          loop: "{{ ec2_node_info.instances }}"
          loop_control:
            label: "{{ item.tags.Name }}"

        - debug:
            msg: "{{ ec2_node_info.instances }}"

        - name: Wait for ssh to come up
          wait_for: host="{{ item.public_ip_address }}" port=22 delay=4 timeout=500
          with_items: "{{ ec2_node_info.instances }}"
          delegate_to: localhost
      when: action == 'create'

    - name: destroy resources
      block:
        - name: destroy postgres db instance
          community.aws.rds_instance:
            state: absent
            region: "{{ default_region }}"
            db_instance_identifier: ansible-aws-rds
            skip_final_snapshot: true

        - name: Gather information about all running ec2 instances
          community.aws.ec2_instance_info:
            region: "{{ default_region }}"
            filters:
              "tag:Name": "aws-ansible*"
              instance-state-name: [ "running"]
          register: destroy_ec2_node_info

        - debug:
            msg: "{{ item.tags.Name }}" 
          loop: "{{ destroy_ec2_node_info.instances }}"
          loop_control:
            label: "{{ item.tags.Name }}"

        - set_fact:
            ec2_hosts: "{{ ec2_hosts | d([]) + [item.instance_id] }}"
          loop: "{{ destroy_ec2_node_info.instances }}"
          loop_control:
            label: "gathering ec2 info"
          when: destroy_ec2_node_info.instances | length > 0

        - name: destroy all EC2 instances
          community.aws.ec2_instance:
            instance_ids: "{{ ec2_hosts }}"
            region: "{{ default_region }}"
            state: absent
          when: ec2_hosts | d([])| length > 0

        - name: destroy database subnet
          community.aws.rds_subnet_group:
            state: absent 
            region: "{{ default_region }}"
            name: dbsubnet     

        - name: destroy db security group 
          amazon.aws.ec2_group:
            name: dbSecurityGroup
            state: absent

        - name: destroy app instance security group 
          amazon.aws.ec2_group:
            name: appInstanceSg
            state: absent

        - name: destroy app load balancer 
          community.aws.elb_application_lb:
            region: "{{ default_region }}"
            name: appLb 
            state: absent

        - name: destroy app target group
          community.aws.elb_target_group:
            region: "{{ default_region }}"
            name: appTargetGroup
            state: absent
          register: destroyatg

        - name: Sleep for 60 secs for app elb lb deletion
          wait_for:
            timeout: 60
          delegate_to: localhost
          when: destroyatg.changed | bool

        - name: destroy app elb security group 
          amazon.aws.ec2_group:
            name: appSg
            state: absent

        - name: Sleep for 60 secs for web lb deletion
          wait_for:
            timeout: 60
          delegate_to: localhost
          when: destroywlt.changed | d(false) | bool

        - name: destroy web elb security group 
          amazon.aws.ec2_group:
            name: webInstanceSg
            state: absent

        - name: destroy web app load balancer 
          community.aws.elb_application_lb:
            region: "{{ default_region }}"
            name: webAppLb 
            state: absent

        - name: destroy web target group
          community.aws.elb_target_group:
            region: "{{ default_region }}"
            name: webTargetGroup
            state: absent
          register: destroywtg
          
        - name: Sleep for 25 secs for app lb deletion
          wait_for:
            timeout: 25
          delegate_to: localhost
          when: destroywtg.changed | bool

        - name: delete web elb security group 
          amazon.aws.ec2_group:
            name: webElb
            state: absent

        - name: query for existing subnet
          amazon.aws.ec2_vpc_net_info:
            region: "{{ default_region }}"
            filters:
              "tag:Name": primary_vpc
          register: vpcinfo 

        - name: delete public subnet routing table
          community.aws.ec2_vpc_route_table:
            region: "{{ default_region }}"
            vpc_id: "{{ vpcinfo.vpcs[0].id }}"
            state: absent
            tags:
              Name: aws-ansible-public-subnet-route-table

        - name: delete subnets
          amazon.aws.ec2_vpc_subnet:
            vpc_id: "{{ vpcinfo.vpcs[0].id }}"
            cidr: "{{ item.cidr }}"
            az: "{{ item.name }}"
            state: absent
          loop: "{{ database_subnets | union(private_subnets) | union(public_subnets)}}"

        - name: delete internet gateway
          amazon.aws.ec2_vpc_igw:
            vpc_id: "{{ vpcinfo.vpcs[0].id }}"
            region: "{{ default_region }}"
            state: absent

        - name: delete VPC
          amazon.aws.ec2_vpc_net:
            name: primary_vpc
            cidr_block: "{{ vpc_cidr_block }}"
            region: "{{ default_region }}"
            state: absent
            tags:
              Name: aws-ansible-vpc
      when: action == 'destroy'

- hosts: web_instances
  gather_facts: no
  become: yes
  tasks:
    - package:
        name: httpd
        state: present

    - service:
        name: httpd
        state: started
      when: action == 'create'
